1. In particular find a graceful way to inform user when they increase font size enough that printing goes out of bounds

2. Score

3. Animation
idea: when new set slides in to replace old one, we pick random pixels from the old last found set and start resetting them, to achieve a disintegrating effect

5. Configuration

7. Menu

8. Restarting



GameState is doing way too much and its signatures aren't unified. fix it. How? internal recordinig mechanism?
printing that fast is causing blackscreen issues. how could i deal with that?
maybe sleep a minimum amount after each print? but I'm already doing that... its probably my basttery level rn.

gettting around slow screen update - the impl Write argument should be my custom buffer, that records where things have been written.
"clear" doesn't actually clear it?

it records changes, and only prints when necessary:

wait im not using a buf right now lol. ok try taht first
well that helps a lot, but it doesn't fix everything

errors definitely not being handled properly when they propagate back up






FIX POS TO BE 0-BASED
FIX PRINTINIG TO USE SMARTBUF METHODS RATHER THAN STRINGS AND WRITE MACROS

making logging!
how to make logging tho... do i need it? Well, apparently, yeah. Cuz things are making the thread panic before it can reset the terminal...
or just do mroe graceful shutdown


//why is it slow to react to user input? hm. may want to do some profiling here.
Suspect that most of this time is just being spent in the printing chaiin? and then the flushing chain...
yeah, just measure the time spent between them with some logging.







ok, i'm tired of this wasteful printing strategy. fuck that. How should i actually do this? we WAIT to print until we get a new frame of animation, or we get user input, or the screen changes size. Alternatively, we stop printing on focuslost? But then, when we have focus, do we just animate constantly? That still seems like a waste. Even if we want to show the current time, we can do that by just printing each second. In general, I think the issue is that this current paradigm bothers me. Just too wasteful.

and for printing time... I think I just gotta accept that this isn't a browser-based app. Doesn't make sense to be printing the time constantly. At most, do it the way top does it- once per second. So that means, yeah, printing on demand, rather than constantly.

How do I know when to print? And how do I handle the framebuf?

I don't want to rewrite edges revealed as a card moves over them. That sucks. Not specifically anyways. So that suggessts, on a successive call to print, I just remember the UNDERLYING framebuf state, and only update which part is overwritten by the moving card. And I don't update the underlying state unless necessary. Can call that part static. Consists of anything that isn't animating.

On each call to print though, we grab the current positions of each animation and write them over the static part. And we do it every print, no need to cache that I think. Although, each card is LOCALLY static, so maybe I can have the animations remember the rough shape? something to think about...


framebuf {
    static: Grid<TermChar>

    dynamics? list animation?
    result? Grid<TermChar>?
}

nononoo

framebuf {
    static: Grid<(count, TermChar)>
    dynamic: Grid<(count, TermChar)>
}

animations write to dynamic. gamestate changes write to static.
when dynamic count is old, we fall through to static. when static count is old, we fall through to blank
lines are marked when changed? how does that interact with blank fall-through?

we print only when prompted to print, by a message or an animation timer activating.






Ok, what's the key idea here? That, each card is effectively static. and yet, with each print call I have to go through all the logic of generating each card again. Kinda wasteful. Would be simpler to STORE the char representation of each card. But that creates a new problem. Who owns these panels?

I think... animation requests them from printing, now renamed panel_gen, on demand. It gives them to framebuf, so framebuf owns them. they are indexable by the card they actually represent. Ainmatiom deletes them, hides them, moves them when necessary, using their handles. panel_gen, (rightly) takes a much more minor role.

panels really are just a grid of pixels. how does framebuf then actually write to the screen?
For a given pixel, how does it know which framebufs affect it?

there are algorithms for this... 



framebuf needs a final result grid, so i'm nont writing out unnecessary formatting strtings to the terminal. final result needs to knjoow which lines were changed... Maybe we write to it as soon as we add / move any internal framebuflayer?





to avoid panics (caused by TermPos out of range) just need to be smart about where animation.rs asks for things to be printed. It needs to know the current state of ts.
maybe animation.rs should be the only thing capable of calling update()?




Should each termchar have a timestamp? Or should I still have a stain, but just permit isolated segments....
If we do termchars with timestamps, I have to check every termchar, at least at the top level.
If I do stains, I limit which ones I have to check, OH WAIT BUT I STILL HAVE TO FALL THROUGH ON EVERY NONE CUZ THERE MIGHT BE A CHANGE SOMEWHERE UNDERNEATH.
So yeah, definitely just do stamps on termchars.


fuck, but what about stamps OUTSIDE the panel? This doesn't work for that.
zalternatives: each panel stores the entire screen, again. I find that kinda gross...
each panel stores a hashmap from pos to stamp? maybe???

Given that this is the case, we don't want stamps, actually. we want each panel to store changes
as a hash from line number to something else... a Vec? but in going over the changes, we don't care what order they're
in, do we?so a hash from line number to hashset of row number.

            // Why are my keys starting to feel weird? Is it just the humidity?
            // They feel kinda sticky. But also maybe I'll just get used to it.
            // It's not like it's affecting their functionality at all. No double presses,
            // no stuck keys. They're still totally fine, they just feel slightly mushier.
            // Probably a normal part of the wearing-in process.
                            // gotta find the old cards in the lastfoundset and make them
                            // disappear. How to do that?
                            //
                            // But bigger question: how to enforce ordering on these cards?
                            // I could make the changeset actually a vector. But that doesn't quite
                            // seem right. There is always an implicit ordering based on their
                            // location i nthe lastfoundset. And the game mechanics shouldn't need
                            // to care about that.
                            //
                            // So, what to do? Should separate the tree into dealt and lastfound,
                            // and write a function for inserting into lastfound based on position?
                            // Ah but this also gets slightly more complicated when we consider
                            // adding in animations.
                            // The z-vals of the last found cards shouldn't change as they move
                            // over to the lastfound positions. So that means the animations can't
                            // just assign z-vals randomly.
                            //
                            // I think near-next step should be making placeholder "animations"
                            // that are actually just permanent, basically no animations at all,
                            // preserving what happens now.
                            //
                            // A system for generating z-values for tree elements, that draws from
                            // a pool of available integers, marking ones as used when necessary.
                            // Can have special functions for special cases, i.e. lastfound groups.
                            // Can use a huge integer range, too, minimize chance of collisions.
                            // And can dedicate cerrtain portions of that range to certain kinds of
                            // trees.
                            //
                            //
                            // Hmmm. And so maybe occlusion here would be determined by that
                            // z-value rather than place in the tree?
                            //
                            // Would that be doable? It would be annoying though, cuz you'd have to
                            // do a full run-through every time... Makes more sense to use z-values
                            // to INDEX into the tree when doing a placement.
                            //
                            // So how would that work. Well, then each panel needs to store some
                            // z-value. But it's kinda... fake. It doesn't actually determine 
                            // occlusion, just speeds up insertions. Also tricky cuz then entire
                            // trees need z-values. Let's call them zmarks actually, cuz they're
                            // kinda fake.
                            //
                            // So maybe i can specify it like this? The tree has, as an invariant,
                            // the fact that all leaves are ordered by z-index in a depth-first
                            // traversal
                            //
                            // Do trees themsselves have indices? Or maybe index ranges? And do
                            // these indices need to get updated ever?
                            //
                            // ugh. do I even need to check which areas a panel covers? Could I
                            // simplify to just, find the first opaque pixel? Less optimized, but
                            // optimize later?
                            //
                            // Currently I handle "z-values" by actually storing things in orderr.
                            // That makes occlusion fairly easy, but scene insertion difficult.
                            //
                            // The alternative is storing objects in just a big bag, and figuring
                            // out occlusion from stored z-values at render phase.
                            //
                            // Which option makes more sense?
                            //
                            // Well, I have to store things as a tree anyways, for the movement.
                            //
                            // Could also mark portions of the display as being drawn with a
                            // certain z-val, skip ones with lwoer?


My eventual realization was that the purpose of the tree structure (unified movement) is conceptually VERY different from the need for a z-buffer. In that the tree structure does not correspond to the z structure necessarily at all. So these should be separate objects.

// Ah. No, there's a fundamental issue here, if I'm trying to make this
// engine extensible. The fundamental issue is that the movement tree
// is an entirely separate problem from occlusion, since different
// leaves in a subtree could span a z-range that contains the zmark of
// an unrelated leaf in a different tree.
// 
// so how to actually do it? I feel like trees should be stored in
// separate places, using refcells.
//
// And how to model occlusion?
//
// simplest way would just be storing those refcells in a big vector,
// sorted by z-index. Ok, but that's a fairly hefty change. What do I
// chagne first....
//
// Well, what's actually going in the refcells? Just panels, I think.
// yeah. Tree stores panel rcs, zvec stores panel rcs.
//
// Wait im confusing RCs and refcells. I think I just need RCs for
// this. Maybe ARCs.
//
// Confusion: couldn't RefCell be implemented with just Rc? Lol no.
//
// Ok so the FrameTree stores the actual RefCells, and the zvec just
// stores references to those RefCells? 
//
// I'm wondering if there's a more Rust-y way to do this, that doesn't
// involve RefCellls at all. But I don't think there is...
// Oh wait. Unless the panels are immutable? Would that make sense?
// Maybe the panels are only mutable for construction?
// That's pretty limiting though...
// Means everything is sprite-based. Yeah fuck that.

No, panels are mutable, which means tree is the actual owner, storing immutable refcells,
and they are borrowed by zbuf. Borrowed? Or something fancier? Try borrowing for now, need the practice.

Can still call them sprites, they're just mutable sprites.


https://stackoverflow.com/questions/32079730/whats-the-fastest-method-of-outputting-text-to-console-in-python3

Suggests a third thread? Or reorganizing thread responsibilities again. Main thread manages movetree as well, printing thread only touches zvec



Idea for independent graphics library name: rustalka





Interesting: rust wont tell you straight up that two lifetimes have to be the same for matching up invariant type construction.
Instead it'll say they have to outlive each other. Kinda confusing but I guess makes sense.

Also, the lifetime annotations on structs aren't about the struct as a whole, it's just about the fields.
It's about what to do when you start extracting and using those fields in functions.

Interesting question: can a struct contain a dead reference as long as you don't touch it?
