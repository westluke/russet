   Compiling set v0.1.0 (/home/luke/Documents/rust_projs/set)
warning: unused imports: `Arc`, `Mutex`
 --> src/main.rs:5:17
  |
5 | use std::sync::{Arc, Mutex, mpsc, mpsc::TryRecvError};
  |                 ^^^  ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Arc`, `Mutex`
 --> src/animation.rs:5:12
  |
5 | use sync::{Arc, Mutex, mpsc::{self, TryRecvError, RecvTimeoutError}};
  |            ^^^  ^^^^^

warning: unused import: `HashMap`
 --> src/animation.rs:6:19
  |
6 | use collections::{HashMap};
  |                   ^^^^^^^

warning: unused imports: `Hash`, `Hasher`
 --> src/animation.rs:7:17
  |
7 | use std::hash::{Hash, Hasher};
  |                 ^^^^  ^^^^^^

warning: unused import: `style`
 --> src/animation.rs:9:36
  |
9 | use crossterm::{terminal, execute, style};
  |                                    ^^^^^

warning: unused import: `crate::term_char::*`
  --> src/animation.rs:17:5
   |
17 | use crate::term_char::*;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `*`, `self`
  --> src/animation.rs:18:46
   |
18 | use crate::frame_buf::{FrameBuf, LayerCell::{self, *}, FrameTree};
   |                                              ^^^^  ^

warning: unused import: `crate::deck::*`
  --> src/animation.rs:19:5
   |
19 | use crate::deck::*;
   |     ^^^^^^^^^^^^^^

warning: unused import: `crate::Id`
 --> src/animation/card_repo.rs:5:5
  |
5 | use crate::Id;
  |     ^^^^^^^^^

warning: unused imports: `Hash`, `Hasher`
 --> src/animation/card_repo.rs:9:17
  |
9 | use std::hash::{Hash, Hasher};
  |                 ^^^^  ^^^^^^

warning: unused import: `hash_map::DefaultHasher`
  --> src/animation/card_repo.rs:11:33
   |
11 | use std::collections::{HashMap, hash_map::DefaultHasher};
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `IndexMut`, `Index`
 --> src/game.rs:7:16
  |
7 | use std::ops::{Index, IndexMut};
  |                ^^^^^  ^^^^^^^^

warning: unused import: `rand::seq::SliceRandom as _`
 --> src/game.rs:8:5
  |
8 | use rand::seq::SliceRandom as _;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crossterm::style::Color`
 --> src/util.rs:1:5
  |
1 | use crossterm::style::Color;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> src/pos.rs:6:5
  |
6 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ops::BitOr`
 --> src/frame_buf.rs:3:5
  |
3 | use std::ops::BitOr;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `Color`, `ContentStyle`, `StyledContent`, `self`
 --> src/frame_buf.rs:5:24
  |
5 | use crossterm::style::{self, Color, ContentStyle, StyledContent, PrintStyledContent};
  |                        ^^^^  ^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `execute`
 --> src/frame_buf.rs:6:24
  |
6 | use crossterm::{queue, execute, cursor};
  |                        ^^^^^^^

warning: unused import: `crate::pos::*`
 --> src/frame_buf.rs:8:5
  |
8 | use crate::pos::*;
  |     ^^^^^^^^^^^^^

warning: unused import: `crate::Id`
  --> src/frame_buf.rs:11:5
   |
11 | use crate::Id;
   |     ^^^^^^^^^

warning: unused imports: `error`, `info`, `warn`
  --> src/frame_buf.rs:13:11
   |
13 | use log::{info, warn, error};
   |           ^^^^  ^^^^  ^^^^^

warning: unused imports: `IndexMut`, `Index`
 --> src/frame_buf/grid.rs:1:16
  |
1 | use std::ops::{Index, IndexMut};
  |                ^^^^^  ^^^^^^^^

warning: unused import: `std::iter::Map`
 --> src/frame_buf/grid.rs:2:5
  |
2 | use std::iter::Map;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `*`, `self`
 --> src/frame_buf/line_update.rs:2:23
  |
2 | use super::DirtyBit::{*, self};
  |                       ^  ^^^^

warning: unused import: `log::info`
 --> src/frame_buf/termable.rs:3:5
  |
3 | use log::info;
  |     ^^^^^^^^^

warning: unused imports: `IndexMut`, `Index`
 --> src/frame_buf/frame_tree.rs:1:16
  |
1 | use std::ops::{Index, IndexMut};
  |                ^^^^^  ^^^^^^^^

warning: unused import: `hash_map::Keys`
 --> src/frame_buf/frame_tree.rs:2:42
  |
2 | use std::collections::{HashMap, HashSet, hash_map::Keys};
  |                                          ^^^^^^^^^^^^^^

warning: unused import: `iter::Copied`
 --> src/frame_buf/frame_tree.rs:4:5
  |
4 | use iter::Copied;
  |     ^^^^^^^^^^^^

warning: unused import: `std::ops::BitOr`
 --> src/frame_buf/frame_tree.rs:5:5
  |
5 | use std::ops::BitOr;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `crate::deck::Card`
 --> src/frame_buf/frame_tree.rs:9:5
  |
9 | use crate::deck::Card;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `crate::term_char::TermChar`
  --> src/frame_buf/frame_tree.rs:10:5
   |
10 | use crate::term_char::TermChar;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `info`
  --> src/frame_buf/frame_tree.rs:15:11
   |
15 | use log::{info};
   |           ^^^^

warning: unused import: `crossterm::style::Color`
  --> src/frame_buf/frame_tree.rs:19:5
   |
19 | use crossterm::style::Color;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ContentStyle`, `StyledContent`
 --> src/term_char.rs:1:37
  |
1 | use crossterm::style::{self, Color, StyledContent, ContentStyle};
  |                                     ^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> src/term_char.rs:2:5
  |
2 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `ChangeAtom::*`
  --> src/main.rs:53:15
   |
53 | use game::{*, ChangeAtom::*};
   |               ^^^^^^^^^^^^^

warning: unused import: `frame_buf::*`
  --> src/main.rs:55:5
   |
55 | use frame_buf::*;
   |     ^^^^^^^^^^^^

warning: unused import: `pos::*`
  --> src/main.rs:57:5
   |
57 | use pos::*;
   |     ^^^^^^

warning: unused import: `io::Write`
 --> src/animation.rs:3:5
  |
3 | use io::Write;
  |     ^^^^^^^^^

warning: unused variable: `start`
   --> src/animation.rs:307:13
    |
307 |     let mut start = Instant::now();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `repo9`
   --> src/animation.rs:313:9
    |
313 |     let repo9 = CardRepo::new(SIZE_9);
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_repo9`

warning: unused variable: `dst`
   --> src/animation.rs:399:40
    |
399 |                         GoodMove(c, _, dst) => {
    |                                        ^^^ help: if this is intentional, prefix it with an underscore: `_dst`

warning: unused variable: `err`
  --> src/util/err.rs:50:13
   |
50 |     fn from(err: SendError<T>) -> Self {
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
  --> src/util/err.rs:56:13
   |
56 |     fn from(err: TryRecvError) -> Self {
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
  --> src/util/err.rs:62:14
   |
62 |      fn from(err: FlexiLoggerError) -> Self {
   |              ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `res`
   --> src/frame_buf/frame_tree.rs:457:21
    |
457 |                 let res = frame.set(pos - self.anchor, cel).unwrap();
    |                     ^^^ help: if this is intentional, prefix it with an underscore: `_res`

warning: unused variable: `pos`
  --> src/layout.rs:89:24
   |
89 |             .filter(|&(pos, c)| c == None)
   |                        ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `c`
  --> src/layout.rs:90:25
   |
90 |             .map(|(pos, c)| pos)
   |                         ^ help: if this is intentional, prefix it with an underscore: `_c`

warning: unused variable: `c`
  --> src/layout.rs:99:25
   |
99 |             .map(|(pos, c)| pos)
   |                         ^ help: if this is intentional, prefix it with an underscore: `_c`

warning: unused variable: `y`
   --> src/main.rs:227:16
    |
227 |         Resize(y, x) => FrameResult::Quit,
    |                ^ help: if this is intentional, prefix it with an underscore: `_y`

warning: unused variable: `x`
   --> src/main.rs:227:19
    |
227 |         Resize(y, x) => FrameResult::Quit,
    |                   ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: unused variable: `state`
   --> src/main.rs:199:23
    |
199 | fn handle_input_frame(state: &mut GameState, input: crossterm::Result<Event>) -> FrameResult {
    |                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: variable does not need to be mutable
  --> src/animation/card_repo.rs:80:9
   |
80 |     let mut shape_spacing = if card.shape == CardShape::Squiggle && card.number == CardNumber::Three {
   |         ----^^^^^^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/animation/card_repo.rs:272:9
    |
272 |     let mut cards_active = stamp_shapes(scale, card_active.clone(), ACTIVE_BG);
    |         ----^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/animation.rs:304:10
    |
304 |     let (mut width, mut height) = TS.update();
    |          ----^^^^^
    |          |
    |          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/animation.rs:304:21
    |
304 |     let (mut width, mut height) = TS.update();
    |                     ----^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/animation.rs:307:9
    |
307 |     let mut start = Instant::now();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/frame_buf/termable.rs:49:28
   |
49 |     pub fn push(&mut self, mut tc: TermChar) -> bool {
   |                            ----^^
   |                            |
   |                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/frame_buf.rs:130:26
    |
130 |         dirt.retain(|&k, mut v| {
    |                          ----^
    |                          |
    |                          help: remove this `mut`

warning: static `anim_dur` is never used
  --> src/animation.rs:31:8
   |
31 | static anim_dur: Duration = Duration::from_millis(500);
   |        ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: variant `Nop` is never constructed
  --> src/animation.rs:42:5
   |
40 | pub enum Msg {
   |          --- variant in this enum
41 |     QuitMsg,
42 |     Nop,
   |     ^^^

warning: function `sleep_until` is never used
   --> src/animation.rs:186:8
    |
186 | pub fn sleep_until(i: Instant) {
    |        ^^^^^^^^^^^

warning: field `deck` is never read
  --> src/animation/card_repo.rs:26:5
   |
25 | pub struct CardRepo {
   |            -------- field in this struct
26 |     deck: FrameTree,
   |     ^^^^

warning: function `set_s` is never used
   --> src/animation/card_repo.rs:140:4
    |
140 | fn set_s(tree: &mut FrameTree, mut pos: TermPos, s: String, fg: Color, bg: Color) -> Result<()> {
    |    ^^^^^

warning: function `get_bg` is never used
   --> src/animation/card_repo.rs:311:4
    |
311 | fn get_bg(c:Card, bg: Color) -> Color {
    |    ^^^^^^

warning: associated function `deck` is never used
  --> src/animation/card_repo.rs:54:12
   |
54 |     pub fn deck(&self) -> FrameTree {
   |            ^^^^

warning: function `find_set` is never used
  --> src/game.rs:22:4
   |
22 | fn find_set(lay:Layout) -> Option<[DealtPos; 3]> {
   |    ^^^^^^^^

warning: variant `Fade` is never constructed
  --> src/game.rs:56:5
   |
50 | pub enum ChangeAtom {
   |          ---------- variant in this enum
...
56 |     Fade(Card, DealtPos),
   |     ^^^^
   |
   = note: `ChangeAtom` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis

warning: associated function `has_changes` is never used
   --> src/game.rs:130:12
    |
130 |     pub fn has_changes(&self) -> bool {
    |            ^^^^^^^^^^^

warning: associated function `last_set_found` is never used
   --> src/game.rs:224:12
    |
224 |     pub fn last_set_found(&self) -> Option<(Card, Card, Card)> {
    |            ^^^^^^^^^^^^^^

warning: constant `QUESTION_BG` is never used
  --> src/util/config.rs:70:11
   |
70 | pub const QUESTION_BG: Color = Color::White;
   |           ^^^^^^^^^^^

warning: constant `SHADOW` is never used
  --> src/util/config.rs:74:11
   |
74 | pub const SHADOW: Color = Color::Black;
   |           ^^^^^^

warning: constant `PIPE_BR` is never used
  --> src/util/config.rs:88:11
   |
88 | pub const PIPE_BR: &'static str = "┛";
   |           ^^^^^^^

warning: constant `PIPE_BL` is never used
  --> src/util/config.rs:89:11
   |
89 | pub const PIPE_BL: &'static str = "┗";
   |           ^^^^^^^

warning: constant `PIPE_TL` is never used
  --> src/util/config.rs:90:11
   |
90 | pub const PIPE_TL: &'static str = "┏";
   |           ^^^^^^^

warning: constant `PIPE_TR` is never used
  --> src/util/config.rs:91:11
   |
91 | pub const PIPE_TR: &'static str = "┓";
   |           ^^^^^^^

warning: associated function `is_empty` is never used
   --> src/deck.rs:139:8
    |
139 |     fn is_empty(&self) -> bool {
    |        ^^^^^^^^

warning: associated function `peek_n` is never used
   --> src/deck.rs:143:8
    |
143 |     fn peek_n(&self, n:usize) -> &[Card] {
    |        ^^^^^^

warning: associated function `take3` is never used
   --> src/deck.rs:153:8
    |
153 |     fn take3(&mut self) -> Option<(Card, Card, Card)> {
    |        ^^^^^

warning: associated function `is_opaque` is never used
  --> src/frame_buf.rs:37:8
   |
37 |     fn is_opaque(&self) -> bool {
   |        ^^^^^^^^^

warning: associated function `is_transparent` is never used
  --> src/frame_buf.rs:45:8
   |
45 |     fn is_transparent(&self) -> bool {
   |        ^^^^^^^^^^^^^^

warning: associated function `enumerate` is never used
  --> src/frame_buf/grid.rs:26:12
   |
26 |     pub fn enumerate(&self) -> impl Iterator<Item=(TermPos, T)> + '_ {
   |            ^^^^^^^^^

warning: associated function `n` is never used
   --> src/frame_buf/termable.rs:109:8
    |
109 |     fn n(&self) -> usize {
    |        ^

warning: associated function `iter` is never used
  --> src/layout.rs:46:8
   |
46 |     fn iter (&self) -> impl Iterator<Item=&Option<Card>> {
   |        ^^^^

warning: associated function `count` is never used
  --> src/layout.rs:81:8
   |
81 |     fn count (&self) -> u16 {
   |        ^^^^^

warning: associated function `extra3` is never used
   --> src/layout.rs:151:8
    |
151 |     fn extra3(&mut self, deck: &mut Deck) -> Vec<(GamePos, GamePos, Card)> {
    |        ^^^^^^

warning: associated function `style_cmd` is never used
  --> src/term_char.rs:58:8
   |
58 |     fn style_cmd(&self) -> style::Colors {
   |        ^^^^^^^^^

warning: associated function `matches` is never used
  --> src/term_char.rs:65:8
   |
65 |     fn matches(&self, fg0: Color, bg0: Color) -> bool {
   |        ^^^^^^^

warning: unused `std::result::Result` that must be used
   --> src/main.rs:255:9
    |
255 |         game_snd.send(Msg::ChangeMsg(chng));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_must_use)]` on by default
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/main.rs:269:21
    |
269 |                     game_snd.send(msg);
    |                     ^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/main.rs:273:17
    |
273 |                 click_snd.send(cmsg);
    |                 ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/main.rs:282:25
    |
282 |                         game_snd.send(msg);
    |                         ^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/main.rs:285:47
    |
285 |                 FrameResult::Click(cmsg) => { click_snd.send(cmsg); }
    |                                               ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: static variable `anim_dur` should have an upper case name
  --> src/animation.rs:31:8
   |
31 | static anim_dur: Duration = Duration::from_millis(500);
   |        ^^^^^^^^ help: convert the identifier to upper case: `ANIM_DUR`
   |
   = note: `#[warn(non_upper_case_globals)]` on by default

warning: unused `std::result::Result` that must be used
   --> src/animation.rs:378:17
    |
378 | /                 back_snd.send(
379 | |                     BackMsg::Collisions(buf.tree().collide(pos))
380 | |                 );
    | |__________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/animation.rs:453:5
    |
453 |     back_snd.send(BackMsg::QuitMsg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/animation/card_repo.rs:108:9
    |
108 |         set_shape_rel(scale, &mut card_lay, card, (drop, offset + shape_pos + spacing).finto(), bg);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/animation/card_repo.rs:125:5
    |
125 |     set_s_clear(&mut card_lay, (drop, offset).finto(), String::from(scale.RAW_QUESTION), fg, bg);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/frame_buf.rs:155:13
    |
155 |             queue!(self.under, cursor::MoveTo(0, row.finto()));
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `queue` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/frame_buf.rs:158:17
    |
158 | /                 queue!(
159 | |                     self.under,
160 | |                     cursor::MoveToColumn(col.finto()),
161 | |                     PrintStyledContent(styled)
162 | |                 );
    | |_________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: this warning originates in the macro `queue` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/frame_buf.rs:167:9
    |
167 |         self.under.flush();
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: `set` (bin "set") generated 101 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 0.78s
     Running `target/debug/set`
