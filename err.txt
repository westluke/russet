   Compiling set v0.1.0 (/home/luke/Documents/other/rust_projs/set)
warning: unused import: `marker`
 --> src/main.rs:1:29
  |
1 | use std::{io, thread, time, marker};
  |                             ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Display`, `Formatter`
 --> src/main.rs:3:16
  |
3 | use std::fmt::{Display, Formatter};
  |                ^^^^^^^  ^^^^^^^^^

warning: unused imports: `Arc`, `Mutex`
 --> src/main.rs:5:17
  |
5 | use std::sync::{Arc, Mutex, mpsc, mpsc::TryRecvError};
  |                 ^^^  ^^^^^

warning: unused imports: `Arc`, `Mutex`
 --> src/animation.rs:5:12
  |
5 | use sync::{Arc, Mutex, mpsc::{self, TryRecvError, RecvTimeoutError}};
  |            ^^^  ^^^^^

warning: unused import: `HashMap`
 --> src/animation.rs:6:19
  |
6 | use collections::{HashMap};
  |                   ^^^^^^^

warning: unused import: `Hash`
 --> src/animation.rs:7:17
  |
7 | use std::hash::{Hash, Hasher};
  |                 ^^^^

warning: unused imports: `Color`, `self`
 --> src/animation.rs:9:44
  |
9 | use crossterm::{terminal, execute, style::{self, Color}};
  |                                            ^^^^  ^^^^^

warning: unused import: `ChangeAtom::*`
  --> src/animation.rs:12:22
   |
12 | use crate::game::{*, ChangeAtom::*};
   |                      ^^^^^^^^^^^^^

warning: unused import: `crate::term_char::*`
  --> src/animation.rs:15:5
   |
15 | use crate::term_char::*;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::sprites::img::Img`
  --> src/animation.rs:18:5
   |
18 | use crate::sprites::img::Img;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::sprites::*`
  --> src/animation.rs:19:5
   |
19 | use crate::sprites::*;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `Id`
 --> src/animation/card_repo.rs:5:13
  |
5 | use crate::{Id, IdManager};
  |             ^^

warning: unused import: `crate::sprites::sprite_manager::SpriteManager`
 --> src/animation/card_repo.rs:8:5
  |
8 | use crate::sprites::sprite_manager::SpriteManager;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Hash`, `Hasher`
  --> src/animation/card_repo.rs:13:17
   |
13 | use std::hash::{Hash, Hasher};
   |                 ^^^^  ^^^^^^

warning: unused import: `hash_map::DefaultHasher`
  --> src/animation/card_repo.rs:15:33
   |
15 | use std::collections::{HashMap, hash_map::DefaultHasher};
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `IndexMut`, `Index`
 --> src/game.rs:7:16
  |
7 | use std::ops::{Index, IndexMut};
  |                ^^^^^  ^^^^^^^^

warning: unused import: `rand::seq::SliceRandom as _`
 --> src/game.rs:8:5
  |
8 | use rand::seq::SliceRandom as _;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crossterm::style::Color`
 --> src/util.rs:1:5
  |
1 | use crossterm::style::Color;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> src/pos.rs:6:5
  |
6 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `log::info`
 --> src/sprites/termable.rs:4:5
  |
4 | use log::info;
  |     ^^^^^^^^^

warning: unused import: `std::borrow::Borrow`
 --> src/sprites/termable.rs:5:5
  |
5 | use std::borrow::Borrow;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `FFrom`, `FInto`
 --> src/sprites/termable.rs:6:19
  |
6 | use crate::util::{FInto, FFrom};
  |                   ^^^^^  ^^^^^

warning: unused import: `Deref`
 --> src/sprites/dirt.rs:1:16
  |
1 | use std::ops::{Deref};
  |                ^^^^^

warning: unused import: `HashSet`
 --> src/sprites/dirt.rs:4:33
  |
4 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused imports: `hash_map::Iter as MapIter`, `hash_set::Iter as SetIter`
 --> src/sprites/dirt.rs:5:24
  |
5 | use std::collections::{hash_map::Iter as MapIter, hash_set::Iter as SetIter};
  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::slice::Iter as VecIter`
 --> src/sprites/dirt.rs:6:5
  |
6 | use std::slice::Iter as VecIter;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `IndexMut`, `Index`
 --> src/sprites/grid.rs:1:16
  |
1 | use std::ops::{Index, IndexMut};
  |                ^^^^^  ^^^^^^^^

warning: unused import: `std::iter::Map`
 --> src/sprites/grid.rs:2:5
  |
2 | use std::iter::Map;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `HashMap`, `HashSet`
 --> src/sprites/sprite.rs:1:24
  |
1 | use std::collections::{HashSet, HashMap};
  |                        ^^^^^^^  ^^^^^^^

warning: unused imports: `RefCell`, `RefMut`
 --> src/sprites/sprite.rs:2:17
  |
2 | use std::cell::{RefCell, RefMut};
  |                 ^^^^^^^  ^^^^^^

warning: unused import: `std::rc::Rc`
 --> src/sprites/sprite.rs:3:5
  |
3 | use std::rc::Rc;
  |     ^^^^^^^^^^^

warning: unused import: `log::info`
  --> src/sprites/sprite.rs:14:5
   |
14 | use log::info;
   |     ^^^^^^^^^

warning: unused import: `std::rc::Rc`
 --> src/sprites/sprite_manager.rs:1:5
  |
1 | use std::rc::Rc;
  |     ^^^^^^^^^^^

warning: unused import: `std::cell::RefCell`
 --> src/sprites/sprite_manager.rs:2:5
  |
2 | use std::cell::RefCell;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `sprite::Sprite`
 --> src/sprites/sprite_manager.rs:6:13
  |
6 | use super::{sprite::Sprite};
  |             ^^^^^^^^^^^^^^

warning: unused import: `crate::pos::TermPos`
  --> src/sprites/sprite_manager.rs:12:5
   |
12 | use crate::pos::TermPos;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ContentStyle`, `StyledContent`, `Stylize`
  --> src/sprites/sprite_manager.rs:16:44
   |
16 | use crossterm::style::{PrintStyledContent, Stylize, StyledContent, ContentStyle};
   |                                            ^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `ContentStyle`, `StyledContent`
 --> src/term_char.rs:1:37
  |
1 | use crossterm::style::{self, Color, StyledContent, ContentStyle};
  |                                     ^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::fmt`
 --> src/term_char.rs:2:5
  |
2 | use std::fmt;
  |     ^^^^^^^^

warning: unused import: `crate::pos::TermPos`
 --> src/bounds.rs:2:5
  |
2 | use crate::pos::TermPos;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::util::FInto as _`
 --> src/bounds.rs:3:5
  |
3 | use crate::util::FInto as _;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `io`, `thread`, `time`
 --> src/id.rs:1:11
  |
1 | use std::{io, thread, time, marker::PhantomData};
  |           ^^  ^^^^^^  ^^^^

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:202:21
    |
202 |             img.set(pos, Opaque(TermChar::new(chars[i], fg, bg)));
    |                 --- ^^^ expected tuple, found struct `TermPos`
    |                 |
    |                 arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:226:21
    |
226 |             img.set(pos, Opaque(TermChar::new(chars[i], fg, bg)));
    |                 --- ^^^ expected tuple, found struct `TermPos`
    |                 |
    |                 arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:263:21
    |
263 |             img.set(pos, c);
    |                 --- ^^^ expected tuple, found struct `TermPos`
    |                 |
    |                 arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: arguments to this function are incorrect
   --> src/animation/card_repo.rs:277:19
    |
277 |     let mut img = Img::rect(scale.CARD_HEIGHT, scale.CARD_WIDTH, bg);
    |                   ^^^^^^^^^ -----------------  ---------------- expected `usize`, found `i16`
    |                             |
    |                             expected `usize`, found `i16`
    |
note: associated function defined here
   --> src/sprites/img.rs:33:12
    |
33  |     pub fn rect(height: usize, width: usize, px: SpriteCell) -> Self {
    |            ^^^^ -------------  ------------  --------------
help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit
    |
277 |     let mut img = Img::rect(scale.CARD_HEIGHT.try_into().unwrap(), scale.CARD_WIDTH, bg);
    |                                              ++++++++++++++++++++
help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit
    |
277 |     let mut img = Img::rect(scale.CARD_HEIGHT, scale.CARD_WIDTH.try_into().unwrap(), bg);
    |                                                                ++++++++++++++++++++

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:279:13
    |
279 |     img.set(tl, Transparent);
    |         --- ^^ expected tuple, found struct `TermPos`
    |         |
    |         arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:280:13
    |
280 |     img.set(tr, Transparent);
    |         --- ^^ expected tuple, found struct `TermPos`
    |         |
    |         arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:281:13
    |
281 |     img.set(bl, Transparent);
    |         --- ^^ expected tuple, found struct `TermPos`
    |         |
    |         arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0308]: mismatched types
   --> src/animation/card_repo.rs:282:13
    |
282 |     img.set(br, Transparent);
    |         --- ^^ expected tuple, found struct `TermPos`
    |         |
    |         arguments to this method are incorrect
    |
    = note: expected tuple `(usize, usize)`
              found struct `pos::TermPos`
note: associated function defined here
   --> src/sprites/img.rs:41:12
    |
41  |     pub fn set(&mut self, pos: (usize, usize), cel: SpriteCell) -> Result<SpriteCell> {
    |            ^^^            -------------------

error[E0277]: the trait bound `(usize, usize): From<(i16, {integer})>` is not satisfied
   --> src/animation/card_repo.rs:288:26
    |
288 |         img.set((row, 0).finto(), Opaque(TermChar::new('┃', edge_fg, edge_bg)));
    |                          ^^^^^ the trait `From<(i16, {integer})>` is not implemented for `(usize, usize)`
    |
    = note: required for `(i16, {integer})` to implement `Into<(usize, usize)>`
    = note: required for `(usize, usize)` to implement `TryFrom<(i16, {integer})>`
note: required for `(usize, usize)` to implement `FFrom<(i16, {integer})>`
   --> src/util.rs:29:12
    |
29  | impl<S, T> FFrom<S> for T
    |            ^^^^^^^^     ^
...
32  |     <T as TryFrom<S>>::Error: Debug
    |                               ----- unsatisfied trait bound introduced here
note: required for `(i16, {integer})` to implement `util::FInto<(usize, usize)>`
   --> src/util.rs:39:12
    |
39  | impl<S, T> FInto<T> for S where T: FFrom<S> {
    |            ^^^^^^^^     ^          -------- unsatisfied trait bound introduced here

error[E0277]: the trait bound `(usize, usize): From<(i16, i16)>` is not satisfied
   --> src/animation/card_repo.rs:289:43
    |
289 |         img.set((row, scale.CARD_WIDTH-1).finto(), Opaque(TermChar::new('┃', edge_fg, edge_bg)));
    |                                           ^^^^^ the trait `From<(i16, i16)>` is not implemented for `(usize, usize)`
    |
    = note: required for `(i16, i16)` to implement `Into<(usize, usize)>`
    = note: required for `(usize, usize)` to implement `TryFrom<(i16, i16)>`
note: required for `(usize, usize)` to implement `FFrom<(i16, i16)>`
   --> src/util.rs:29:12
    |
29  | impl<S, T> FFrom<S> for T
    |            ^^^^^^^^     ^
...
32  |     <T as TryFrom<S>>::Error: Debug
    |                               ----- unsatisfied trait bound introduced here
note: required for `(i16, i16)` to implement `util::FInto<(usize, usize)>`
   --> src/util.rs:39:12
    |
39  | impl<S, T> FInto<T> for S where T: FFrom<S> {
    |            ^^^^^^^^     ^          -------- unsatisfied trait bound introduced here

error[E0277]: the trait bound `(usize, usize): From<({integer}, i16)>` is not satisfied
   --> src/animation/card_repo.rs:293:26
    |
293 |         img.set((0, col).finto(), Opaque(TermChar::new('━', edge_fg, edge_bg)));
    |                          ^^^^^ the trait `From<({integer}, i16)>` is not implemented for `(usize, usize)`
    |
    = note: required for `({integer}, i16)` to implement `Into<(usize, usize)>`
    = note: required for `(usize, usize)` to implement `TryFrom<({integer}, i16)>`
note: required for `(usize, usize)` to implement `FFrom<({integer}, i16)>`
   --> src/util.rs:29:12
    |
29  | impl<S, T> FFrom<S> for T
    |            ^^^^^^^^     ^
...
32  |     <T as TryFrom<S>>::Error: Debug
    |                               ----- unsatisfied trait bound introduced here
note: required for `({integer}, i16)` to implement `util::FInto<(usize, usize)>`
   --> src/util.rs:39:12
    |
39  | impl<S, T> FInto<T> for S where T: FFrom<S> {
    |            ^^^^^^^^     ^          -------- unsatisfied trait bound introduced here

error[E0599]: no variant or associated item named `PanelOob` found for enum `SetErrorKind` in the current scope
  --> src/sprites/grid.rs:56:39
   |
56 |             } else { Err(SE::new(SEK::PanelOob, "column index out of bounds in Grid::get")) }
   |                                       ^^^^^^^^ variant or associated item not found in `SetErrorKind`
   |
  ::: src/util/err.rs:7:1
   |
7  | pub enum SetErrorKind {
   | --------------------- variant or associated item `PanelOob` not found for this enum

error[E0599]: no variant or associated item named `PanelOob` found for enum `SetErrorKind` in the current scope
  --> src/sprites/grid.rs:57:35
   |
57 |         } else { Err(SE::new(SEK::PanelOob, "row index out of bounds in Grid::get")) }
   |                                   ^^^^^^^^ variant or associated item not found in `SetErrorKind`
   |
  ::: src/util/err.rs:7:1
   |
7  | pub enum SetErrorKind {
   | --------------------- variant or associated item `PanelOob` not found for this enum

error[E0599]: no variant or associated item named `PanelOob` found for enum `SetErrorKind` in the current scope
  --> src/sprites/grid.rs:66:39
   |
66 |             } else { Err(SE::new(SEK::PanelOob, "column index out of bounds in Grid::set")) }
   |                                       ^^^^^^^^ variant or associated item not found in `SetErrorKind`
   |
  ::: src/util/err.rs:7:1
   |
7  | pub enum SetErrorKind {
   | --------------------- variant or associated item `PanelOob` not found for this enum

error[E0599]: no variant or associated item named `PanelOob` found for enum `SetErrorKind` in the current scope
  --> src/sprites/grid.rs:67:35
   |
67 |         } else { Err(SE::new(SEK::PanelOob, "row index out of bounds in Grid::set")) }
   |                                   ^^^^^^^^ variant or associated item not found in `SetErrorKind`
   |
  ::: src/util/err.rs:7:1
   |
7  | pub enum SetErrorKind {
   | --------------------- variant or associated item `PanelOob` not found for this enum

error[E0308]: arguments to this function are incorrect
  --> src/sprites/sprite.rs:59:18
   |
59 |             img: Img::rect(height, width, SpriteCell::default()),
   |                  ^^^^^^^^^ ------  ----- expected `usize`, found `i16`
   |                            |
   |                            expected `usize`, found `i16`
   |
note: associated function defined here
  --> src/sprites/img.rs:33:12
   |
33 |     pub fn rect(height: usize, width: usize, px: SpriteCell) -> Self {
   |            ^^^^ -------------  ------------  --------------
help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit
   |
59 |             img: Img::rect(height.try_into().unwrap(), width, SpriteCell::default()),
   |                                  ++++++++++++++++++++
help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit
   |
59 |             img: Img::rect(height, width.try_into().unwrap(), SpriteCell::default()),
   |                                         ++++++++++++++++++++

warning: unreachable statement
   --> src/main.rs:244:17
    |
243 |                 panic!();
    |                 -------- any code following this expression is unreachable
244 |                 click_snd.send(cmsg);
    |                 ^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unused import: `io::Write`
 --> src/animation.rs:3:5
  |
3 | use io::Write;
  |     ^^^^^^^^^

warning: unused import: `Hasher`
 --> src/animation.rs:7:23
  |
7 | use std::hash::{Hash, Hasher};
  |                       ^^^^^^

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `set` (bin "set") generated 45 warnings
error: could not compile `set` due to 16 previous errors; 45 warnings emitted
